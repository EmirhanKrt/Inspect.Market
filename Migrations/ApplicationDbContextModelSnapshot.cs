// <auto-generated />
using System;
using Inspect.Market.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inspect.Market.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Inspect.Market.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6da3ce2-895a-45c1-9563-dae6312c26df",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECxTqNvv4mkYra0aWMiDnPybeIvsbRJ19xmTXA+1GFGgfpkvxUt0Z2lIlvM5g6LNmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85bfd2a6-7131-4819-938b-a61c5c92f164",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Inspect.Market.Models.Cryptocurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CirculationSupply")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DecimalCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxSupply")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalSupply")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cryptocurrencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CirculationSupply = 19716053m,
                            CreatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8745),
                            DecimalCount = 2,
                            MaxSupply = 21000000m,
                            Name = "Bitcoin",
                            Slug = "bitcoin",
                            Symbol = "BTC",
                            TotalSupply = 19716053m,
                            UpdatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8750)
                        },
                        new
                        {
                            Id = 2,
                            CirculationSupply = 122275693m,
                            CreatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8752),
                            DecimalCount = 2,
                            MaxSupply = -1m,
                            Name = "Ethereum",
                            Slug = "ethereum",
                            Symbol = "ETH",
                            TotalSupply = 122275693m,
                            UpdatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8752)
                        },
                        new
                        {
                            Id = 3,
                            CirculationSupply = 112941691563m,
                            CreatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8754),
                            DecimalCount = 4,
                            MaxSupply = -1m,
                            Name = "Tether",
                            Slug = "tether",
                            Symbol = "USDT",
                            TotalSupply = 116079124154m,
                            UpdatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8754)
                        },
                        new
                        {
                            Id = 4,
                            CirculationSupply = 147583562m,
                            CreatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8756),
                            DecimalCount = 1,
                            Name = "Bnb",
                            Slug = "bnb",
                            Symbol = "BNB",
                            TotalSupply = 147583562m,
                            UpdatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8756)
                        },
                        new
                        {
                            Id = 5,
                            CirculationSupply = 462137999m,
                            CreatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8758),
                            DecimalCount = 2,
                            MaxSupply = -1m,
                            Name = "Solana",
                            Slug = "solana",
                            Symbol = "SOL",
                            TotalSupply = 578771776m,
                            UpdatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8758)
                        },
                        new
                        {
                            Id = 6,
                            CirculationSupply = 32706614766m,
                            CreatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8760),
                            DecimalCount = 4,
                            MaxSupply = -1m,
                            Name = "USDC",
                            Slug = "usd-coin",
                            Symbol = "USDC",
                            TotalSupply = 32706614766m,
                            UpdatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8760)
                        },
                        new
                        {
                            Id = 7,
                            CirculationSupply = 55618185850m,
                            CreatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8762),
                            DecimalCount = 4,
                            MaxSupply = 100000000000m,
                            Name = "XRP",
                            Slug = "xrp",
                            Symbol = "XRP",
                            TotalSupply = 99987512072m,
                            UpdatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8762)
                        },
                        new
                        {
                            Id = 8,
                            CirculationSupply = 144842056384m,
                            CreatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8764),
                            DecimalCount = 5,
                            MaxSupply = -1m,
                            Name = "Dogecoin",
                            Slug = "dogecoin",
                            Symbol = "DOGE",
                            TotalSupply = 144842056384m,
                            UpdatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8764)
                        },
                        new
                        {
                            Id = 9,
                            CirculationSupply = 35743190042m,
                            CreatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8766),
                            DecimalCount = 4,
                            MaxSupply = 45000000000m,
                            Name = "Cardano",
                            Slug = "cardano",
                            Symbol = "ADA",
                            TotalSupply = 36994116265m,
                            UpdatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8766)
                        },
                        new
                        {
                            Id = 10,
                            CirculationSupply = 2803634836m,
                            CreatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8767),
                            DecimalCount = 4,
                            Name = "Fantom",
                            Slug = "fantom",
                            Symbol = "FTM",
                            TotalSupply = 3175000000m,
                            UpdatedAt = new DateTime(2024, 6, 25, 21, 27, 31, 892, DateTimeKind.Utc).AddTicks(8768)
                        });
                });

            modelBuilder.Entity("Inspect.Market.Models.Holding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CryptocurrencyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CryptocurrencyCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CryptocurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CryptocurrencyId");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("UserId");

                    b.ToTable("Holdings");
                });

            modelBuilder.Entity("Inspect.Market.Models.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("Inspect.Market.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CryptocurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("HoldingId")
                        .HasColumnType("int");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransactionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CryptocurrencyId");

                    b.HasIndex("HoldingId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Inspect.Market.Models.Watchlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CryptocurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CryptocurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Watchlists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Inspect.Market.Models.Holding", b =>
                {
                    b.HasOne("Inspect.Market.Models.Cryptocurrency", "Cryptocurrency")
                        .WithMany()
                        .HasForeignKey("CryptocurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Inspect.Market.Models.Portfolio", "Portfolio")
                        .WithMany("Holdings")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Inspect.Market.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cryptocurrency");

                    b.Navigation("Portfolio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Inspect.Market.Models.Portfolio", b =>
                {
                    b.HasOne("Inspect.Market.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Inspect.Market.Models.Transaction", b =>
                {
                    b.HasOne("Inspect.Market.Models.Cryptocurrency", "Cryptocurrency")
                        .WithMany()
                        .HasForeignKey("CryptocurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Inspect.Market.Models.Holding", "Holding")
                        .WithMany()
                        .HasForeignKey("HoldingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cryptocurrency");

                    b.Navigation("Holding");
                });

            modelBuilder.Entity("Inspect.Market.Models.Watchlist", b =>
                {
                    b.HasOne("Inspect.Market.Models.Cryptocurrency", "Cryptocurrency")
                        .WithMany()
                        .HasForeignKey("CryptocurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Inspect.Market.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cryptocurrency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Inspect.Market.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Inspect.Market.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inspect.Market.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Inspect.Market.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inspect.Market.Models.Portfolio", b =>
                {
                    b.Navigation("Holdings");
                });
#pragma warning restore 612, 618
        }
    }
}
